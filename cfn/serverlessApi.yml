
AWSTemplateFormatVersion: "2010-09-09"
Description: Example Serverless API

Resources:
  ExampleHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Lambda Proxy
      Description: Lambda proxy using quick create
      ProtocolType: HTTP
      Target: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ExampleLambda}/invocations

  ## Default Lambda
  ExampleLambda:
    #AWS-DOC http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        ZipFile: |
          exports.defaultHandler = async (event,context) => { console.log(event) ; return {statusCode: 200, body: "default fired"} }
      Description: "The proxy lambda that fields requests from client"
      Handler: index.defaultHandler
      MemorySize: 1024
      Role: !GetAtt ExampleLambdaRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 300

    ExampleLambdaRole:
      #AWS-DOC http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
    
    DefaultPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref CCDefaultLambda
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExampleHttpApi}/*"
